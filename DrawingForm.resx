<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>